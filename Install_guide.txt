First test the connection:

ping archlinux.org -c 5 (testing internet)

We update the date:

timedatectl set-ntp true

Load the keyboard:

loadkeys br-abnt2

Create the partitions on the disk:

cfdisk (create the 3 partitions boot home and swap. If dual boot, use the existing Efi partition)

If you do not want to separate the home partition, you can mount the home partition inside the boot partition by creating a folder called /mnt/home with mkdir after mounting the boot partition

We format the partitions:

mkfs.ext4 /dev/sdx (formatting the partitions with the file type of each, ext4 for root and home, fat for EFI)

mkfs.fat -F 32 /dev/sdx (only if you created an EFI partition)

Creating and activating swap:

mkswap /dev/sdx(create swap)
swapon /dev/sdx (activate swap)

Now, we mount the partitions: 

mount /dev/sdx(root partition) /mnt

if home, mount /dev/sdx (home partition) /mnt/home

mount /dev/sdx(Efi partition) (if created) /mnt/efi

Before installing things, let's update the mirror list for faster downloads: 

First, we backup the current mirrorlist in case of any problems: 

cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak

pacman -Sy

pacman -S pacman-contrib

rankmirrors -n 10 /etc/pacman.d/mirrorlist.bak > /etc/pacman.d/mirrorlist

Now we perform the installation of the main packages: 

pacstrap
 -i /mnt base base-devel linux linux-headers linux-firmware 
intel-ucode(or amd-ucode) sudo nano vim git neofetch (to show off) 
networkmanager(internet manager) dhcpcd (dhcp client) 
pulseaudio(audio) bluez(for bluetooth) man-db man-pages texinfo emacs

Generating the filesystem table:
genfstab -U /mnt >> /mnt/etc/fstab 

Logging into the root partition as root

arch-chroot /mnt

Set the superuser password: 
passwd 

Create ordinary users: 

useradd -m *username*

Set the user's password: 

passwd *username*

Set the permissions of the ordinary user: 

usermod -aG wheel(group to run everything and have privileges of 
root users),storage(access to external memory, such as hds, usbs, etc),power *username* 

Editing the sudoers file to allow the sudo command for members of the wheel group, so that all wheel users can use sudo: 

EDITOR=nano visudo 

Inside, uncomment the line %wheel ALL=(ALL) ALL and, if you wish, add the line just below the one you uncommented. This is to prompt the user again for the password after a certain period of time:

Defaults timestamp_timeout=0

Save the changes and exit. 

Generating the system language: 

nano /etc/locale.gen 

uncomment the system language to be used (en_US.UTF-8 for US English, and pt_BR-UTF-8 for Brazilian Portuguese) 

Generating the locale:
locale-gen

We create a locale configuration file with the command 

echo LANG=*insert the language to be utilzied, for example pt_BR.UTF-8* > /etc/locale.conf

At the end, export the language:

export LANG=en_BR.UTF-8 (same thing as above)

Now we create the hostname for the computer: 

echo *insert your hostname here* > /etc/hostname

Now we edit the hosts file to receive the default ips: 

nano /etc/hosts

And add the following lines: 

127.0.0.1 localhost
::1 localhost
127.0.1.1 *hostname*.localdomain localhost

To set the region/timezone and link the information to localtime: 

ln -sf /usr/share/zoneinfo/*tab*(to see the list of zones and see which one is yours 
zone, in this case mine is America)/*tab*(Insert the local, in my case 
Fortaleza) /etc/localtime

Syncing the internal clock: 

hwclock --systohc

Installing the bootloader ( extremely important):

See which partition the boot is on (in this case, as we have dual boot with windows, the partition is the windows boot partition). You can do this with cfdisk or fdisk

Create an efi directory:

mkdir /boot/efi 

Mount the partition in this created directory: 

mount /dev/sdx /boot/efi
(If you are dual booting, here on /dev/sdx you put the EFI partition that already exists)

Install the packages needed for the bootloader: 

pacman -S grub efibootmgr dosfstools mtools 

Edit the grub file so grub can search for windows: 

nano /etc/default/grub

Inside the file, edit the final line, uncommenting it, which contains: 

#GRUB_DISABLE_OS_PROBER=false 

Why?
 Well, os-prober is a package whose function is to perform a search for other 
other operating systems to add a UEFI entry. 

It needs to be installed. By default, os-prober is disabled in grub, because the intention is usually to install arch without dualboot, and also for security reasons, as explained in the file. 

Install it now:

pacman -S os-prober

grub-install --target=x86_64-efi --bootloader-id=grub_uefi --recheck

Now we generate the grub configuration file: 

grub-mkconfig -o /boot/grub/grub.cfg 

(At this point, os-prober will fail. Why? Because when you run it on this instance, it does not recognize the other partitioning tables on the HD/SSD. When you reboot, the partition tables will be read again and now you can install it)

After rebooting, you log into arch again, and type:

mkdir /mnt2

mount /dev/sda1 /mnt2

os-prober (this time it will recognize that windows exists, a warning message will appear)

grub mkconfig again

And now dual boot is configured.

Finally, we will start the internet services. 

First, dhcp: 

systemctl enable dhcpcd.service

And now the internet connection: 

systemctl enable NetworkManager.service 

Now we can exit the arch-chroot environment: 

exit (or CTRL+D)

We unmount all partitions:

umount -l(that's a lowercase L)R /mnt 

Now, go for the hug: 

reboot

Take out the USB stick, bless yourself, and go. 



From this point on, arch is already installed on your computer. However, for didactic purposes, let's install a graphical user interface, KDE. You can 
You can install whatever you like, from there you have to look up 
environments and window managers and choose one and install it on your system. 

For KDE

sudo pacman -S xorg xorg-xinit xterm plasma plasma-desktop kde-applications kdeplasma-addons sddm 

Now, let's activate: 

sudo nano ~/.xinitrc

And inside, write exec startkde, so that the environment is set to always start. 

Then we start the service: 

sudo systemctl enable sddm.service 

And reboot.

Thats it!!!! You installed Arch Linux with KDE DE. Have fun!
